[1,["ceazljDZJHf7wXZfmTvKb8","53dDhzxe1DdYqcu1XRJ8qa","25Wkk1iBVJXbXyxmMrb86v","a7supDknJJqZ1fvG2i9zmR@f9941","23F3tE1cZDkqn1i2houpPs","carws3yURDe55lh0K2G9Wy","9cGWl1ZLhBO5LtIEpWB2oc","13w6CYSoxP9rCc1eRk6VkJ","6fq34mxNBINY28SnFop7fU@f9941","e1LKmSxZdGcIbxri91Ofiv@f9941","9byY1jchtOlZfZgDYGUtQi@f9941","4c5Fa3OylEu5Drhau4Dw8Q@f9941","43l+L/mPdNtbWlLzXK/op9","29r9ug5J1J+6WFIfrORFbr@6c48a","4c5Fa3OylEu5Drhau4Dw8Q@6c48a","4eKag7xTFMgqY7YyBnCAoD@6c48a","0acRqQ7JtAVYEdah7K5ktQ","c1pMbh+clB3q33RWXZoyVM@f9941","a1vuchqnVAX5XeHamPMQkT@f9941","108ccN9IFIPZ+MpiiWZXK0@f9941","d2I3Yb/cBL5b2eK6WyMX1p@f9941","29r9ug5J1J+6WFIfrORFbr@f9941","e6/FVsB7lI+ppQXqOBl4Fm@f9941","5dOpcpzeZIC78X2zB6220D","c3f6x2zwFM+bjGFYkSbNXS","f75hVlJjxBRqE4CczG5qC6","e1p78WOeRMGLR3hcHgaiOy@f9941","a1vuchqnVAX5XeHamPMQkT@6c48a","a7supDknJJqZ1fvG2i9zmR@6c48a","d2I3Yb/cBL5b2eK6WyMX1p@6c48a","e1p78WOeRMGLR3hcHgaiOy@6c48a","e6/FVsB7lI+ppQXqOBl4Fm@6c48a","4eKag7xTFMgqY7YyBnCAoD@f9941"],["node","_spriteFrame","_parent","_textureSource","root","prefab","data","_font","helperComponent","targetSprite","glanceMaterial","label","renderPrefab","particleSystem","_customMaterial","_effectAsset","_cameraComponent","factory","targetInfo","fillerTransform","cameraNode","command","playgroundRenderer","scene","shuffler","groupsManager","filler","animator","asset","tileSprite"],[["cc.Node",["_name","_layer","_id","_objFlags","__editorExtras__","_components","_lpos","_parent","_prefab","_children","_lscale","_lrot","_euler"],-2,12,5,1,4,2,5,5,5],["cc.Node",["_name","_layer","_id","_components","_parent","_children","_lpos","_lscale","_prefab"],0,9,1,2,5,5,4],"cc.SpriteFrame",["ResizePreset",["resizeMode","_height","positionType","_y","_x","_width"],-3],["cc.Node",["_name","_layer","_parent","_components","_children","_lpos"],1,1,2,2,5],["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","__prefab","_color"],1,1,6,4,5],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","_isSystemFontUsed","_verticalAlign","node","_font"],-3,1,6],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots"],2,1,1,2],["cc.ParticleSystem2D",["_name","_dstBlendFactor","duration","emissionRate","angle","angleVar","startSize","speed","speedVar","tangentialAccel","startRadius","playOnLoad","_custom","_totalParticles","life","endSize","startSizeVar","startSpin","endSpin","endSpinVar","radialAccel","node","__prefab","_startColorVar","_endColorVar","posVar","gravity"],-18,1,4,5,5,5,5],["4185atRzUJOUZdXEsB3LCjD",["resizeByScale","node","settings"],2,1,9],["cc.Widget",["_alignFlags","_top","_bottom","node"],0,1],["BasicTileConfig",["tileColor"],3,5],["cc.Camera",["_projection","_priority","_orthoHeight","_far","_visibility","_near","_clearFlags","node","_color"],-4,1,5],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["588bamAv4VPH4YOLsanaERd",["node","__prefab","particleSystem"],3,1,4,1],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["111b3fTISNCZLTnbcAIVJd+",["target","node","__prefab","helperComponent"],2,1,4,1],["27d0cdp4NhINrBIL6AGjzuO",["node","__prefab","targetSprite","glanceMaterial"],3,1,4,1,6],["e7d4c6AVJxNjK8Ll7p1N6xT",["collapseEffect","node","__prefab","renderSprite"],2,1,4,1],["cc.Material",["_props","_states","_defines"],0],["cc.SceneAsset",["_name"],2],["ResizeMap",["landscape","portrait"],3,4,4],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyColorHDR","_groundAlbedoHDR"],3,5,5],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["6af61A7JIpD/Kf+igVVxrSA",["targetValueType","maxValuePropName","node","label"],1,1,1],["b20f2xrxGpC5rUKnybUBKtM",["targetValueType","node","label"],2,1,1],["8eb2fTtPUlDE4IvYaSeVqyd",["targetValueType","maxValuePropName","labelTemplate","node","label","fillerTransform"],0,1,1,1],["aef48SzIfdK35YoXGqq/nSW",["node","shakeSize","shakeFrequency","cameraNode"],3,1,5,5,1],["cc.Mask",["node"],3,1],["fb62aiNstVPjYCIN2EVaRJE",["node","configs"],3,1,9],["EffectsGeneratorConfig",["type","factory"],2,1],["cc.TargetInfo",["localID"],2],["fbff44CQd5LbpdpYndXRjxe",["node"],3,1],["83ba2vtRIVPG4ZOB+ifmpIk",["configs"],3,9],["b7aacUbanJPBrY4X/aLPmwl",["configs"],3,9],["BoosterTileConfig",["boosterType","minGroupLength","prefab"],1,6],["a0b38dsOiZHx5uUJ0yb9lOK",["node","commands"],3,1,9],["InputTargetCommandPair",["inputTarget","command"],2,1],["cc.PrefabInstance",["fileId","propertyOverrides"],2,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["bf564jkchdDnLM/A92eCZlG",["node","playgroundManager","playgroundRenderer"],3,1,1,1],["2cb19e9+31LvaCCVUm193sU",["node","dictionary"],3,1,1],["270cdYDKnhNqpDn+9cbQwtY",["tilePoints","node","dictionary"],2,1,1],["dd23elKIE1AF7q9aO/fYLkT",["node","configs"],3,1,9],["TileGeneratorConfig",["type","factory"],2,1],["869f2nr8DpAcYSLH2ujTHf5",["node","dictionary"],3,1,1],["c5dcaq3wntA7oeyfE3jHQFb",["node","dictionary"],3,1,1],["e3292reX+VK54NwsldkH07h",["node","configs"],3,1,9],["TileRenderGeneratorConfig",["type","factory"],2,1],["5defbS0WjxE9rFVvJUoBJIx",["node","tileGenerator"],3,1,1],["a916cUBDlxI4qSi+a/YYPON",["node"],3,1],["59f2dwLBMhPcoe0dDPpvIZt",["node"],3,1],["2b00euJBjRKmZcuVDYzxOg8",["node","backNode","renderNode","playground","generator"],3,1,1,1,1,1],["b0d3d7KGPFH66L6bdOP9fo7",["node"],3,1],["1a944sXbI1PKK/kBY1DgeeM",["node"],3,1],["ee8c4sPvz5K96L5bfk9nxhH",["node"],3,1],["f5703ZBcbxNIqfN7aoB7yQh",["node","configs"],3,1,9],["PoolManagerConfig",["predefinedCount","prefab"],2,6],["a3e37Vg3I9GdYUV4q+Gz2E0",["node"],3,1]],[[16,0,2],[24,0,1,1],[8,0,1,2,2],[5,0,1,1],[5,0,2,1,1],[5,0,1,3,1],[10,1,2,1],[3,0,2,5,1,4,3,7],[3,0,2,5,1,3,6],[3,0,1,4,3,5],[12,0,1],[4,0,2,3,2],[6,1,0,2,3,3],[15,0,2],[10,0,1,2,2],[1,0,1,4,5,3,6,3],[5,0,2,1,3,1],[0,0,9,5,8,2],[1,0,4,5,3,8,6,7,2],[19,0,1,2,3,2],[20,0,1,2,3,1],[21,0,1,2,3,2],[67,0,1,2],[0,0,5,8,6,2],[1,0,4,3,2],[6,0,2,4,2],[44,0,1,2,3],[48,0,1,2,3],[49,0,1,2,2],[14,0,1,2,4],[0,0,5,8,6,11,12,2],[0,0,1,7,5,10,3],[1,0,1,5,3,6,3],[1,0,1,4,3,7,3],[1,0,2,4,3,3],[4,0,1,2,3,3],[17,0,1,2,1],[6,1,2,3,2],[22,0,1,2,4],[3,0,5,1,4],[3,2,4,3],[25,0,1,1],[39,0,1,2],[7,0,5,1,2,3,4,6,7,7],[7,0,1,2,3,4,6,6],[40,0,2],[54,0,1,2],[58,0,1,2],[0,0,1,2,9,5,6,4],[0,0,9,5,6,10,2],[0,0,7,5,6,2],[0,0,1,7,5,6,3],[0,0,1,7,5,6,10,3],[0,0,7,9,6,2],[0,3,4,7,8,3],[0,0,5,8,2],[1,0,1,2,5,3,6,4],[1,0,1,2,4,5,3,6,4],[1,0,4,5,3,6,7,2],[1,0,2,4,5,3,3],[4,0,1,2,4,3,3],[4,0,2,4,3,5,2],[4,0,2,3,5,2],[5,0,1],[8,0,3,2],[18,0,1,2,3,2],[9,0,1,2,3,14,4,5,6,15,7,8,9,10,11,12,13,21,22,23,24,17],[9,0,1,2,3,4,5,6,16,17,18,19,7,8,9,20,10,11,12,13,21,22,25,26,23,24,20],[6,0,2,5,3,2],[6,2,4,1],[23,0,2],[3,0,2,1,4,3,6],[3,0,2,1,3,5],[11,0,3,2],[11,0,1,2,3,4],[26,0,1,2,3,2],[27,0,1,2,3,4,1],[28,0,1,1],[29,0,1],[30,1],[31,1],[32,1],[33,0,1,2,3,3],[34,0,1,2,2],[35,0,1,2,3,4,5,4],[36,0,1,2,3,1],[37,0,1],[38,0,1,1],[7,0,5,1,2,3,4,6,7],[41,0,1],[42,0,1],[12,1],[43,0,1],[45,0,1,1],[46,0,1,2],[47,0,1,2],[50,0,1,2,1],[51,0,1,1],[52,0,1,2,2],[53,0,1,1],[55,0,1,1],[56,0,1,1],[57,0,1,1],[59,0,1,1],[60,0,1],[61,0,1],[62,0,1,2,3,4,1],[13,0,1,2,5,3,4,7,8,7],[13,0,1,2,3,6,4,7,8,7],[63,0,1],[64,0,1],[65,0,1],[66,0,1,1],[68,0,1]],[[[[29,"glance_effect",[{"hash":3799025663,"name":"glance_effect|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Settings","stageFlags":16,"binding":1,"members":[{"name":"lerp_color","type":16,"count":1},{"name":"width","type":13,"count":1},{"name":"interval","type":13,"count":1},{"name":"speed","type":13,"count":1},{"name":"start_shift","type":13,"count":1},{"name":"lerp_coef","type":13,"count":1},{"name":"lerp_pow","type":13,"count":1},{"name":"alpha_threshold","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Settings {\n  vec4 lerp_color;\n  float width;\n  float interval;\n  float speed;\n  float start_shift;\n  float lerp_coef;\n  float lerp_pow;\n  float alpha_threshold;\n};\nvec4 frag () {\n  vec4 col = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    col = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    col *= color;\n    if (col.a > alpha_threshold && col.r + col.g + col.b > 1.) {\n      float shift = interval - mod(cc_time.x * speed + start_shift, interval * 2.);\n      float delta = uv0.x / 3. - uv0.y;\n      float max_val = width / 1.5 + shift;\n      float min_val = width / -1.5 + shift;\n      if (delta < max_val && delta > min_val) {\n        float coef = max(0., 1. - abs(((delta - shift) / (max_val - min_val)) / width));\n        col = mix(col, lerp_color, pow(coef, lerp_pow) * lerp_coef);\n      }\n    }\n  #endif\n  return col;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nlayout(std140) uniform Settings {\n  vec4 lerp_color;\n  float width;\n  float interval;\n  float speed;\n  float start_shift;\n  float lerp_coef;\n  float lerp_pow;\n  float alpha_threshold;\n};\nvec4 frag () {\n  vec4 col = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    col = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    col *= color;\n    if (col.a > alpha_threshold && col.r + col.g + col.b > 1.) {\n      float shift = interval - mod(cc_time.x * speed + start_shift, interval * 2.);\n      float delta = uv0.x / 3. - uv0.y;\n      float max_val = width / 1.5 + shift;\n      float min_val = width / -1.5 + shift;\n      if (delta < max_val && delta > min_val) {\n        float coef = max(0., 1. - abs(((delta - shift) / (max_val - min_val)) / width));\n        col = mix(col, lerp_color, pow(coef, lerp_pow) * lerp_coef);\n      }\n    }\n  #endif\n  return col;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\n   uniform vec4 lerp_color;\n   uniform float width;\n   uniform float interval;\n   uniform float speed;\n   uniform float start_shift;\n   uniform float lerp_coef;\n   uniform float lerp_pow;\n   uniform float alpha_threshold;\nvec4 frag () {\n  vec4 col = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    col = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    col *= color;\n    if (col.a > alpha_threshold && col.r + col.g + col.b > 1.) {\n      float shift = interval - mod(cc_time.x * speed + start_shift, interval * 2.);\n      float delta = uv0.x / 3. - uv0.y;\n      float max_val = width / 1.5 + shift;\n      float min_val = width / -1.5 + shift;\n      if (delta < max_val && delta > min_val) {\n        float coef = max(0., 1. - abs(((delta - shift) / (max_val - min_val)) / width));\n        col = mix(col, lerp_color, pow(coef, lerp_pow) * lerp_coef);\n      }\n    }\n  #endif\n  return col;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":48}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]}]}],[{"passes":[{"program":"glance_effect|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"width":{"type":13,"value":[0.5]},"interval":{"type":13,"value":[3]},"speed":{"type":13,"value":[2]},"start_shift":{"type":13,"value":[0]},"lerp_coef":{"type":13,"value":[0.25]},"lerp_pow":{"type":13,"value":[2]},"lerp_color":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"alpha_threshold":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[[[13,"BoosterExplosionEffect"],[23,"BoosterExplosionEffect",[[[4,-2,[0,"4dt9BOxu1O6YLNr/6cdaUQ"],[5,0,0]],-3,[36,-5,[0,"56OBw4MsNJK5NqHKRP+WLd"],-4]],4,1,4],[2,"b8MqC21rxJy6v+ZhtHW5lF",-1,0],[1,0,-16,-1]],[66,"Node<ParticleSystem2D>",1,0.02,100,0.25,0,0,0,400,0,0,0,100,false,true,100,1,[0,"e42LyVP7tNFpIKzLRx4Yvi"],[4,4278190080],[4,4278190080]]],0,[0,4,1,0,0,1,0,-2,2,0,13,2,0,0,1,0,6,1,5],[2,2],[14,1],[2,11]],[[[13,"BoosterHRocketRender"],[17,"BoosterHRocketRender",[-6],[[[16,-2,[0,"585bY/O1FL04h4dfbpqdZK"],[5,171,171],[0,0,0]],-3,[19,1,-5,[0,"bdwR64kg5LR6Vv5Al7zzAr"],-4]],4,1,4],[2,"e8kYwAwkVNeatmzK4VpWk1",-1,0]],[30,"Render",[[[4,-7,[0,"72LWxPL6RGjJtlORvzZLJx"],[5,171,163]],-8,[20,-10,[0,"5d4bYewXlO4KJTyhzCID+s"],-9,0]],4,1,4],[2,"0fpQsx/oxJ/a1AoocUVE2s",1,0],[1,-4.859,-7.289,0],[3,0,0,-0.3665012267242973,0.9304175679820246],[1,0,0,-43]],[18,"Holder",1,[2],[[4,-11,[0,"a96DAYJkZAgrscyVdqtzqu"],[5,0,0]]],[2,"93mHu+l6RA9YmXhpYzF38z",1,0],[1,85,96,0],[1,0.98,0.98,1]],[25,0,2,[0,"54iCFVW1NFCo7QUPQp7hvO"]],[21,2,1,[0,"13xhX/wPhIQ6bA4LfxsNAk"],4]],0,[0,4,1,0,0,1,0,-2,5,0,8,5,0,0,1,0,-1,3,0,0,2,0,-2,4,0,9,4,0,0,2,0,0,3,0,6,1,2,2,3,11],[0,4],[10,1],[1,3]],[[[38,[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALPHA_TEST":true,"USE_TEXTURE":true}]]],0,0,[0],[15],[12]],[[{"name":"bar_back","rect":{"x":0,"y":0,"width":209,"height":17},"offset":{"x":0,"y":0},"originalSize":{"width":209,"height":17},"rotated":false,"capInsets":[6,6,6,6],"packable":true}],[2],0,[0],[3],[13]],[[[29,"particle_effect",[{"hash":67215139,"name":"particle_effect|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"particle_effect|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"explosion_wave","rect":{"x":0,"y":0,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[3],[14]],[[{"name":"tile_part","rect":{"x":16,"y":17,"width":89,"height":86},"offset":{"x":0.5,"y":0},"originalSize":{"width":120,"height":120},"rotated":false,"capInsets":[0,0,0,0],"packable":false}],[2],0,[0],[3],[15]],[[[38,[{"width":0.9,"interval":4,"speed":0.5,"start_shift":1,"lerp_pow":2.5}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[15],[16]],[[[70,"GamePlayScene"],[48,"PlaygroundManager",33554432,"85q5AqLPZD7pvWIdwt3WOQ",[-6,-7,-8],[[[63,-1],-2,-3,-4,-5],4,1,1,1,1],[1,480,320.00000000000006,0]],[49,"PlaygroundRenderer",[-13,-14,-15],[[[5,-9,[5,272,303],[0,0,0]],-10,-11,[14,true,-12,[[1,[7,2,2,"90vh","90vh","5vh","50vh-50sh"],[7,2,2,"90vw","90vw","5vw","40vh-45vw"]]]]],4,1,1,4],[1,-448,-320.82352941176475,0],[1,2.1176470588235294,2.1176470588235294,1]],[56,"CanvasUI",33554432,"7e5zaNivlBB4FAQplwfaGH",[-20,-21,-22,-23],[[3,-16,[5,960,640]],[41,-18,-17],[73,45,-19]],[1,480,320,0]],[75,"GamePlayScene",[-25,-26,-27,1,-28,3],[64,"9a13e8a6-74a8-426c-acc7-40066a0cce41",[-24]],[76,[77,[2,0,0,0,0.520833125],[2,0,0,0,0]],[78,[4,4283190348]],[79],[80],[81]]],[57,"Canvas",33554432,"beI88Z2HpFELqR4T5EMHpg",4,[-33,-34,2],[[3,-29,[5,960,640]],[41,-31,-30],[74,45,5.684341886080802e-14,5.684341886080802e-14,-32]],[1,480,320.00000000000006,0]],[32,"TurnsCounter",33554432,[-40,-41],[[3,-35,[5,217.6,168]],[12,1,0,-36,11],[6,-37,[[1,[8,1,1,"85pw","35ph","22ph"],[7,1,1,"30pw","22ph","-46pw+50sw","-45ph+50sh"]]]],[82,1,"maxTurnsCount",-39,-38]],[1,0,105.60000000000002,0]],[32,"PointsCounter",33554432,[-47,-48],[[3,-42,[5,217.6,168]],[12,1,0,-43,14],[6,-44,[[1,[8,1,1,"85pw","35ph","-22ph"],[7,1,1,"30pw","22ph","46pw-50sw","-45ph+50sh"]]]],[83,2,-46,-45]],[1,0,-105.6,0]],[15,"InfoPlate",33554432,3,[6,7],[[3,-49,[5,256,480]],[12,1,0,-50,15],[6,-51,[[1,[7,1,2,"100vw-110vh","75vh","95vw-(100vw-110vh)/2","41vh"],[7,1,2,"95vw","650px","50vw","100vh"]]]]],[1,304,-57.60000000000002,0]],[15,"BarPlate",33554432,3,[-55,-56],[[5,-52,[5,256,96],[0,0.5,1]],[12,1,0,-53,18],[6,-54,[[1,[7,1,2,"100vw-110vh","15vh","95vw-(100vw-110vh)/2","100vh"],[7,1,2,"90vw","130px","50vw","100vh"]]]]],[1,304,320,0]],[15,"ProgressBar",33554432,9,[-63],[[5,-57,[5,235.52,28.799999999999997],[0,0.5,0]],[12,1,0,-58,17],[6,-59,[[1,[8,1,1,"92pw","30ph","-100ph+10px"],[8,1,1,"94pw","30ph","-100ph+10px"]]]],[84,2,"pointsGoal","GOAL: #maxValue",-62,-61,-60]],[1,0,-86,0]],[15,"ValueFrame",33554432,6,[-67],[[3,-64,[5,195.84,67.2]],[12,1,0,-65,10],[6,-66,[[1,[8,1,1,"90pw","40ph","-25ph"],[8,1,1,"90pw","40ph","-25ph"]]]]],[1,0,-42,0]],[15,"ValueFrame",33554432,7,[-71],[[3,-68,[5,195.84,67.2]],[12,1,0,-69,13],[6,-70,[[1,[8,1,1,"90pw","40ph","-25ph"],[8,1,1,"90pw","40ph","-25ph"]]]]],[1,0,-42,0]],[60,"TileGenerator",33554432,1,[-73,-74],[-72]],[61,"TileRenderGenerator",1,[-76,-77],[-75],[1,-480,-320.00000000000006,0]],[50,"Camera",5,[[-78,[85,-80,[5,5,-5],[0,10,20],-79]],1,4],[1,0,0,1000]],[24,"BackgroundRender",5,[[3,-81,[5,960,639.744]],[68,0,-82,[4,4294937461],3],[6,-83,[[1,[39,1,"100vw+10px","100vh+10px"],[39,1,"100vw+10px","100vh+10px"]]]]]],[24,"BackRender",2,[[5,-84,[5,272,303],[0,0,0]],[37,1,-85,4]]],[24,"BlocksHolder",2,[[5,-86,[5,0,0],[0,0,0]],[86,-87]]],[58,"EffectManager",2,[-91,-92],[[87,-90,[[42,1,-88],[42,2,-89]]]],[1,-15.11111111111111,0.3888888888888841,0],[1,0.4722222222222222,0.4722222222222222,1]],[33,"NameLabel",33554432,6,[[5,-93,[5,607,252],[0,0.5,0]],[43,"TURNS:",2,200,200,200,false,-94,9],[14,true,-95,[[1,[9,3,"40ph","0","0"],[9,3,"40ph","0","0"]]]]],[1,0.26666666666666666,0.26666666666666666,1]],[31,"ValueLabel",33554432,11,[[[3,-96,[5,208,252]],-97,[14,true,-98,[[1,[9,3,"90ph","0","0"],[9,3,"90ph","0","0"]]]]],4,1,4],[1,0.24000000000000002,0.24000000000000002,1]],[33,"NameLabel",33554432,7,[[5,-99,[5,721,252],[0,0.5,0]],[43,"POINTS:",2,200,200,200,false,-100,12],[14,true,-101,[[1,[9,3,"40ph","0","0"],[9,3,"40ph","0","0"]]]]],[1,0.26666666666666666,0.26666666666666666,1]],[31,"ValueLabel",33554432,12,[[[3,-102,[5,130,252]],-103,[14,true,-104,[[1,[9,3,"90ph","0","0"],[9,3,"90ph","0","0"]]]]],4,1,4],[1,0.24000000000000002,0.24000000000000002,1]],[51,"FillerRender",33554432,10,[[-105,[37,1,-106,16],[6,-107,[[1,[40,1,"-50pw"],[40,1,"-50pw"]]]]],1,4,4],[1,-117.75999999999999,0,0]],[52,"ProgressLabel",33554432,9,[[[5,-108,[5,1024,252],[0,0.5,0]],-109,[14,true,-110,[[1,[71,3,1,"40ph","0","-70ph+20"],[72,3,1,"40ph","-70ph+20"]]]]],4,1,4],[1,0,-47.200000000000045,0],[1,0.1523809523809524,0.1523809523809524,1]],[45,["d6Poe5t2RENonBehkyOgn9"]],[89,1],[90,[[10,[4,4278190335]],[10,[4,4278255411]],[10,[4,4294901801]],[10,[4,4278255605]],[10,[4,4293591295]],[91],[10,[4,4282861383]],[10,[4,4278226943]],[10,[4,4292935424]]]],[53,"Dictionaries",1,[-111,-112],[1,-480,-320.00000000000006,0]],[92,[[26,1,4,0],[26,2,5,1],[26,3,6,2]]],[59,"InputManager","2fzWQwwlhGyKQo8kktUV8Y",4,[-115],[[93,-114,[[94,1,-113]]]]],[54,0,null,3,[65,"d6Poe5t2RENonBehkyOgn9",-118,[95,"bcL7FvvIlNYKZYi/BxpyXT",[[27,"SceneSwitcher",["_name"],26],[28,["_lpos"],26,[1,0,0,0]],[28,["_lrot"],26,[3,0,0,0,1]],[28,["_euler"],26,[1,0,0,0]],[27,0,["hideDelay"],-116],[27,0.15,["showDuration"],-117]]],19]],[34,"GameManager","f15DZeOLtARIAdSZJjVl5Z",4,[[96,-120,27,-119]]],[35,"BasicTileFactory",33554432,13,[-121]],[97,34,28],[11,"BasicTileDictionary",29,[28]],[11,"BoosterTileDictionary",29,[30]],[35,"BoosterTileFactory",33554432,13,[-122]],[98,50,38,30],[99,13,[[46,1,35],[46,2,39]]],[11,"BasicTileRenderFactory",14,[-123]],[100,41,28],[11,"BoosterTileRenderFactory",14,[-124]],[101,43,30],[102,14,[[47,1,42],[47,2,44]]],[103,1,40],[104,1],[105,1],[106,2,17,18,27,45],[107,0,1073741824,320,0,2000,1073741824,15,[4,4294931906]],[11,"TileExplosionEffectFactory",19,[-125]],[109,51],[11,"BoosterExplosionEffectFactory",19,[-126]],[110,53],[111,2],[34,"PoolManager","cffWynY6dK4LtFu74lJXz3",4,[[112,-127,[[22,10,5],[22,10,6],[22,10,7],[22,30,8]]]]],[11,"TileInputCommand",31,[-128]],[113,57],[62,"Camera",3,[-129],[1,0,0,1000]],[108,0,1073741824,320,2000,6,33554432,59,[4,4278190080]],[44,"10",200,200,200,false,21],[44,"0",200,200,200,false,23],[5,24,[5,122,15],[0,0,0]],[88,"GOAL: 1000",2,200,200,200,false,25],[45,["95+t5CR2pBf77M8Mq9V3QK"]]],0,[0,0,1,0,-2,27,0,-3,46,0,-4,47,0,-5,48,0,-1,13,0,-2,14,0,-3,29,0,0,2,0,-2,49,0,-3,55,0,0,2,0,-1,17,0,-2,18,0,-3,19,0,0,3,0,16,60,0,0,3,0,0,3,0,-1,59,0,-2,8,0,-3,9,0,-4,32,0,-1,32,0,-1,33,0,-2,56,0,-3,31,0,-5,5,0,0,5,0,16,50,0,0,5,0,0,5,0,-1,15,0,-2,16,0,0,6,0,0,6,0,0,6,0,11,61,0,0,6,0,-1,20,0,-2,11,0,0,7,0,0,7,0,0,7,0,11,62,0,0,7,0,-1,22,0,-2,12,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,-1,10,0,-2,25,0,0,10,0,0,10,0,0,10,0,19,63,0,11,64,0,0,10,0,-1,24,0,0,11,0,0,11,0,0,11,0,-1,21,0,0,12,0,0,12,0,0,12,0,-1,23,0,-1,40,0,-1,34,0,-2,38,0,-1,45,0,-1,41,0,-2,43,0,-1,50,0,20,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,18,0,0,18,0,17,52,0,17,54,0,0,19,0,-1,51,0,-2,53,0,0,20,0,0,20,0,0,20,0,0,21,0,-2,61,0,0,21,0,0,22,0,0,22,0,0,22,0,0,23,0,-2,62,0,0,23,0,-1,63,0,0,24,0,0,24,0,0,25,0,-2,64,0,0,25,0,-1,36,0,-2,37,0,21,58,0,0,31,0,-1,57,0,18,65,0,18,65,0,4,32,0,22,49,0,0,33,0,-1,35,0,-1,39,0,-1,42,0,-1,44,0,-1,52,0,-1,54,0,0,56,0,-1,58,0,-1,60,0,23,4,1,2,4,2,2,5,3,2,4,6,2,8,7,2,8,27,24,48,27,25,47,27,26,46,28,0,36,30,0,37,49,27,55,129],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,42,52,54,61,62,64],[5,5,5,1,1,5,5,5,5,7,1,1,7,1,1,1,1,1,1,28,29,12,12,12,7,7,7],[4,5,6,17,18,6,4,5,7,0,8,9,0,8,9,19,20,21,22,23,10,24,25,7,0,0,0]],[[[13,"BoosterBombRender"],[17,"BoosterBombRender",[-6],[[[16,-2,[0,"585bY/O1FL04h4dfbpqdZK"],[5,171,171],[0,0,0]],-3,[19,1,-5,[0,"bdwR64kg5LR6Vv5Al7zzAr"],-4]],4,1,4],[2,"e8kYwAwkVNeatmzK4VpWk1",-1,0]],[23,"Render",[[[16,-7,[0,"7fcmv/DtJJUJsispKuZZgC"],[5,205,202],[0,0.5,0.45]],-8,[20,-10,[0,"5d4bYewXlO4KJTyhzCID+s"],-9,0]],4,1,4],[2,"25Z7Xi+YNCzoKVBWAawarK",1,0],[1,13.046,-13.046,0]],[18,"Holder",1,[2],[[4,-11,[0,"a96DAYJkZAgrscyVdqtzqu"],[5,0,0]]],[2,"93mHu+l6RA9YmXhpYzF38z",1,0],[1,85,96,0],[1,0.98,0.98,1]],[25,0,2,[0,"e5VW1rkBBHCKnenuQl38d9"]],[21,2,1,[0,"13xhX/wPhIQ6bA4LfxsNAk"],4]],0,[0,4,1,0,0,1,0,-2,5,0,8,5,0,0,1,0,-1,3,0,0,2,0,-2,4,0,9,4,0,0,2,0,0,3,0,6,1,2,2,3,11],[0,4],[10,1],[1,26]],[[{"name":"back","rect":{"x":0,"y":0,"width":272,"height":303},"offset":{"x":0,"y":0},"originalSize":{"width":272,"height":303},"rotated":false,"capInsets":[30,30,30,30],"packable":true}],[2],0,[0],[3],[27]],[[{"name":"rocket","rect":{"x":3,"y":1,"width":524,"height":501},"offset":{"x":1.5,"y":0},"originalSize":{"width":527,"height":503},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[3],[28]],[[[13,"TileRender"],[17,"TileRender",[-6],[[[16,-2,[0,"585bY/O1FL04h4dfbpqdZK"],[5,171,171],[0,0,0]],-3,[19,1,-5,[0,"bdwR64kg5LR6Vv5Al7zzAr"],-4]],4,1,4],[2,"e8kYwAwkVNeatmzK4VpWk1",-1,0]],[55,"Render",[[[4,-7,[0,"2egdCTXvlFfLxqb7MEqLke"],[5,171,192]],-8,[20,-10,[0,"5d4bYewXlO4KJTyhzCID+s"],-9,0]],4,1,4],[2,"83NvJXCIBKY4XNX4u86a9h",1,0]],[18,"Holder",1,[2],[[4,-11,[0,"a96DAYJkZAgrscyVdqtzqu"],[5,0,0]]],[2,"93mHu+l6RA9YmXhpYzF38z",1,0],[1,85,96,0],[1,0.98,0.98,1]],[69,2,[0,"75SxOR/VBMSpGE8JU9869R"]],[21,1,1,[0,"13xhX/wPhIQ6bA4LfxsNAk"],4]],0,[0,4,1,0,0,1,0,-2,5,0,8,5,0,0,1,0,-1,3,0,0,2,0,-2,4,0,9,4,0,0,2,0,0,3,0,6,1,2,2,3,11],[0,4],[10,1],[1,10]],[[[13,"BoosterVRocketRender"],[17,"BoosterVRocketRender",[-6],[[[16,-2,[0,"585bY/O1FL04h4dfbpqdZK"],[5,171,171],[0,0,0]],-3,[19,1,-5,[0,"bdwR64kg5LR6Vv5Al7zzAr"],-4]],4,1,4],[2,"e8kYwAwkVNeatmzK4VpWk1",-1,0]],[30,"Render",[[[4,-7,[0,"19hz9cA5lKMYWLXqOSl7FE"],[5,171,163]],-8,[20,-10,[0,"5d4bYewXlO4KJTyhzCID+s"],-9,0]],4,1,4],[2,"e0VnR6jm9ATr2JUhRO8QED",1,0],[1,-2.791,-16.745,0],[3,0,0,0.39073112848927377,0.9205048534524404],[1,0,0,46]],[18,"Holder",1,[2],[[4,-11,[0,"a96DAYJkZAgrscyVdqtzqu"],[5,0,0]]],[2,"93mHu+l6RA9YmXhpYzF38z",1,0],[1,85,96,0],[1,0.98,0.98,1]],[25,0,2,[0,"23UJlN1JRPoK29sMPyZRpo"]],[21,2,1,[0,"13xhX/wPhIQ6bA4LfxsNAk"],4]],0,[0,4,1,0,0,1,0,-2,5,0,8,5,0,0,1,0,-1,3,0,0,2,0,-2,4,0,9,4,0,0,2,0,0,3,0,6,1,2,2,3,11],[0,4],[10,1],[1,3]],[[{"name":"bar_filler","rect":{"x":0,"y":0,"width":122,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":122,"height":15},"rotated":false,"capInsets":[6,6,6,6],"packable":true}],[2],0,[0],[3],[29]],[[{"name":"bomb_2","rect":{"x":8,"y":1,"width":500,"height":473},"offset":{"x":2,"y":18.5},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":false}],[2],0,[0],[3],[30]],[[{"name":"top_plate","rect":{"x":0,"y":0,"width":223,"height":42},"offset":{"x":0,"y":0},"originalSize":{"width":223,"height":42},"rotated":false,"capInsets":[10,0,10,10],"packable":true}],[2],0,[0],[3],[31]],[[[13,"TileExplosionEffect"],[23,"TileExplosionEffect",[[[4,-2,[0,"4dt9BOxu1O6YLNr/6cdaUQ"],[5,0,0]],-3,[36,-5,[0,"56OBw4MsNJK5NqHKRP+WLd"],-4]],4,1,4],[2,"b8MqC21rxJy6v+ZhtHW5lF",-1,0],[1,0,-16,-1]],[67,"Node<ParticleSystem2D>",1,0.02,500,0,180,30,50,-47.369998931884766,-47.369998931884766,-142.11000061035156,200,0,100,150,100,false,true,300,1,[0,"e42LyVP7tNFpIKzLRx4Yvi"],[0,30,30],[0,0,-500],[4,4278190080],[4,4278190080]]],0,[0,4,1,0,0,1,0,-2,2,0,13,2,0,0,1,0,6,1,5],[2,2],[14,1],[2,32]]]]
